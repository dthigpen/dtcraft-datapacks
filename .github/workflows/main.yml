# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, test]
  pull_request:
    branches: [ master, test]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set up JRE 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          java-package: jre # optional (jdk, jre, jdk+fx or jre+fx) - defaults to jdk
      
      # Check out this repo
      - name: Checkout dtcraft-datapacks
        uses: actions/checkout@v2
        with:
          path: dtcraft-datapacks

      - name: Checkout dpbuild
        uses: actions/checkout@v2
        with:
          repository: dthigpen/dpbuild
          path: dpbuild
      
      - name: Checkout minecraft-test-report
        uses: actions/checkout@v2
        with:
          repository: dthigpen/minecraft-test-report
          path: minecraft-test-report
      # This action creates permission issues when writing to the same folder so first put in downloads
      - name: Download PlayerDB
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: rx-modules/PlayerDB
          tag: 'v2.0.1'
          path: downloads
          file: PlayerDB.v2.0.1.zip
        
      - name: Unzip library datapacks
        run: |
          mkdir libraries
          find downloads -name '*.zip' -exec bash -c 'file=$(basename {}); unzip {} -d libraries/${file%.zip}' \;
          echo Unzipped library datapacks

      - name: Build datapacks to artifacts directory with dpbuild
        run: |
          find ./dtcraft-datapacks -maxdepth 1 -type d -exec bash -c 'test -e $1/pack.mcmeta && python dpbuild/dpbuild $1 libraries --dest test-artifacts --no-dep-tests' -- {} \;
          find ./dtcraft-datapacks -maxdepth 1 -type d -exec bash -c 'test -e $1/pack.mcmeta && python dpbuild/dpbuild $1 libraries --dest release-artifacts --release' -- {} \;


      - name: Download Minecraft server jar
        run: |
          mkdir server
          echo "Downloading Minecraft server jar"
          wget -q -P server https://launcher.mojang.com/v1/objects/125e5adf40c659fd3bce3e66e67a16bb49ecc1b9/server.jar
        shell: bash
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Version range or exact version of a Python version to use, using SemVer's version range syntax
      - name: Start server and run tests
        env:
          RCON_PWD: ${{ secrets.RCON_PWD }}
        run: |
          ${GITHUB_WORKSPACE}/dtcraft-datapacks/.github/scripts/start_minecraft_server.sh
          echo "Copying datapacks"
          cp -r test-artifacts/* server/world/datapacks
          pushd minecraft-test-report
          python -m pip install -r requirements.txt
          # PACKS=$(for d in ../test-artifacts/*/; do echo $d; done)
          # Use non-bundled datapacks for tests
          PACKS=$(for d in ../dtcraft-datapacks/*/pack.mcmeta; do echo $(dirname $d); done)
          python test_runner.py ${PACKS} --output "$GITHUB_STEP_SUMMARY"
          popd
      
      # TODO watch upload-artifacts for feature to upload multiple from wildcard
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: datapacks
          path: release-artifacts/*.zip
      
      
