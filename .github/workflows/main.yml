# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, test]
  pull_request:
    branches: [ master, test]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set up JRE 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          java-package: jre # optional (jdk, jre, jdk+fx or jre+fx) - defaults to jdk
            
      # Check out this repo
      - name: Checkout dtcraft-datapacks
        uses: actions/checkout@v2
        with:
          path: dtcraft-datapacks

      - name: Checkout dpbuild
        uses: actions/checkout@v2
        with:
          repository: dthigpen/dpbuild
          path: dpbuild
      
      # This action creates permission issues when writing to the same folder so first put in downloads
      - name: Download PlayerDB
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: rx-modules/PlayerDB
          tag: 'v2.0.1'
          path: downloads
          file: PlayerDB.v2.0.1.zip
        
      - name: Unzip library datapacks
        run: |
          mkdir libraries
          find downloads -name '*.zip' -exec bash -c 'file=$(basename {}); unzip {} -d libraries/${file%.zip}' \;
          echo Unzipped library datapacks

      - name: Build datapacks to artifacts directory with dpbuild
        run: |
          find ./dtcraft-datapacks -maxdepth 1 -type d -exec bash -c 'test -e {}/pack.mcmeta && python dpbuild/dpbuild {} libraries --dest test-artifacts' \;
          find ./dtcraft-datapacks -maxdepth 1 -type d -exec bash -c 'test -e {}/pack.mcmeta && python dpbuild/dpbuild {} libraries --dest artifacts --release' \;


      - name: Download Minecraft server jar
        run: |
          mkdir server
          echo "Downloading Minecraft server jar"
          wget -q -P server https://launcher.mojang.com/v1/objects/125e5adf40c659fd3bce3e66e67a16bb49ecc1b9/server.jar
        shell: bash

      - name: Start server and run pytest
        env:
          RCON_PWD: ${{ secrets.RCON_PWD }}
        run: |
          pushd server
          echo "eula=true" > eula.txt
          echo "rcon.port=25575" > server.properties
          echo "enable-rcon=true" > server.properties
          echo "rcon.password=${{ secrets.RCON_PWD }}" > server.properties

          screen -dmS minecraft java -Xmx2048M -Xms2048M -jar server.jar nogui
          popd
          echo "Waiting 180s for server to start up"
          sleep 180
          pip install pytest
          pytest ./dtcraft-datapacks/.github/scripts --dir=dtcraft-datapacks
      
      
#       - name: Upload artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: datapacks
#           path: artifacts/*.zip
      
      
